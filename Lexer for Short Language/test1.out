Lexeme,Token,Count
package,KEYWORD,1
lexer,IDENTIFIER,1
;,SEPERATOR,71
import,KEYWORD,9
java,IDENTIFIER,6
.,SEPERATOR,112
util,IDENTIFIER,6
ArrayList,IDENTIFIER,3
List,IDENTIFIER,5
Map,IDENTIFIER,2
TreeMap,IDENTIFIER,2
regex,IDENTIFIER,2
Matcher,IDENTIFIER,2
Pattern,IDENTIFIER,4
exceptions,IDENTIFIER,1
AnalyzerException,IDENTIFIER,3
token,IDENTIFIER,8
Token,IDENTIFIER,11
TokenType,IDENTIFIER,44
public,KEYWORD,5
class,KEYWORD,1
Lexer,IDENTIFIER,2
{,SEPERATOR,15
private,KEYWORD,4
<,OPERATOR,9
,,SEPERATOR,48
String,IDENTIFIER,5
>,OPERATOR,8
regEx,IDENTIFIER,42
result,IDENTIFIER,5
(,SEPERATOR,76
),SEPERATOR,76
=,OPERATOR,10
new,KEYWORD,6
launchRegEx,IDENTIFIER,2
},SEPERATOR,15
void,KEYWORD,2
tokenize,IDENTIFIER,1
source,IDENTIFIER,7
throws,KEYWORD,1
int,KEYWORD,2
position,IDENTIFIER,7
0,LITERAL,2
null,LITERAL,4
do,KEYWORD,1
separateToken,IDENTIFIER,2
if,KEYWORD,5
!=,OPERATOR,4
getEnd,IDENTIFIER,1
add,IDENTIFIER,2
while,KEYWORD,1
&&,OPERATOR,1
length,IDENTIFIER,4
throw,KEYWORD,2
"Lexical error at position # ",LITERAL,1
+,OPERATOR,5
getTokens,IDENTIFIER,1
return,KEYWORD,4
getFilteredTokens,IDENTIFIER,1
filteredResult,IDENTIFIER,3
for,KEYWORD,2
t,IDENTIFIER,3
:,OPERATOR,2
this,KEYWORD,1
!,OPERATOR,1
getTokenType,IDENTIFIER,1
isAuxiliary,IDENTIFIER,1
fromIndex,IDENTIFIER,6
||,OPERATOR,1
>=,OPERATOR,1
IllegalArgumentException,IDENTIFIER,1
"Illegal index in the input stream!",LITERAL,1
tokenType,IDENTIFIER,3
values,IDENTIFIER,1
p,IDENTIFIER,2
compile,IDENTIFIER,1
".{",LITERAL,1
"}",LITERAL,1
get,IDENTIFIER,1
DOTALL,IDENTIFIER,1
m,IDENTIFIER,3
matcher,IDENTIFIER,1
matches,IDENTIFIER,1
lexema,IDENTIFIER,3
group,IDENTIFIER,1
1,LITERAL,1
put,IDENTIFIER,39
BlockComment,IDENTIFIER,1
"(/\\*.*?\\*/).*",LITERAL,1
LineComment,IDENTIFIER,1
"(//(.*?)[\r$]?\n).*",LITERAL,1
WhiteSpace,IDENTIFIER,1
"( ).*",LITERAL,1
OpenBrace,IDENTIFIER,1
"(\\().*",LITERAL,1
CloseBrace,IDENTIFIER,1
"(\\)).*",LITERAL,1
Semicolon,IDENTIFIER,1
"(;).*",LITERAL,1
Comma,IDENTIFIER,1
"(,).*",LITERAL,1
OpeningCurlyBrace,IDENTIFIER,1
"(\\{).*",LITERAL,1
ClosingCurlyBrace,IDENTIFIER,1
"(\\}).*",LITERAL,1
DoubleConstant,IDENTIFIER,1
"\\b(\\d{1,9}\\.\\d{1,32})\\b.*",LITERAL,1
IntConstant,IDENTIFIER,1
"\\b(\\d{1,9})\\b.*",LITERAL,1
Void,IDENTIFIER,1
"\\b(void)\\b.*",LITERAL,1
Int,IDENTIFIER,1
"\\b(int)\\b.*",LITERAL,1
Double,IDENTIFIER,1
"\\b(int|double)\\b.*",LITERAL,1
Tab,IDENTIFIER,1
"(\\t).*",LITERAL,1
NewLine,IDENTIFIER,1
"(\\n).*",LITERAL,1
Public,IDENTIFIER,1
"\\b(public)\\b.*",LITERAL,1
Private,IDENTIFIER,1
"\\b(private)\\b.*",LITERAL,1
False,IDENTIFIER,1
"\\b(false)\\b.*",LITERAL,1
True,IDENTIFIER,1
"\\b(true)\\b.*",LITERAL,1
Null,IDENTIFIER,1
"\\b(null)\\b.*",LITERAL,1
Return,IDENTIFIER,1
"\\b(return)\\b.*",LITERAL,1
New,IDENTIFIER,1
"\\b(new)\\b.*",LITERAL,1
Class,IDENTIFIER,1
"\\b(class)\\b.*",LITERAL,1
If,IDENTIFIER,1
"\\b(if)\\b.*",LITERAL,1
Else,IDENTIFIER,1
"\\b(else)\\b.*",LITERAL,1
While,IDENTIFIER,1
"\\b(while)\\b.*",LITERAL,1
Static,IDENTIFIER,1
"\\b(static)\\b.*",LITERAL,1
Point,IDENTIFIER,1
"(\\.).*",LITERAL,1
Plus,IDENTIFIER,1
"(\\+{1}).*",LITERAL,1
Minus,IDENTIFIER,1
"(\\-{1}).*",LITERAL,1
Multiply,IDENTIFIER,1
"(\\*).*",LITERAL,1
Divide,IDENTIFIER,1
"(/).*",LITERAL,1
EqualEqual,IDENTIFIER,1
"(==).*",LITERAL,1
Equal,IDENTIFIER,1
"(=).*",LITERAL,1
ExclameEqual,IDENTIFIER,1
"(\\!=).*",LITERAL,1
Greater,IDENTIFIER,1
"(>).*",LITERAL,1
Less,IDENTIFIER,1
"(<).*",LITERAL,1
Identifier,IDENTIFIER,1
"\\b([a-zA-Z]{1}[0-9a-zA-Z_]{0,31})\\b.*",LITERAL,1

Errors
Lexeme,LineNo
